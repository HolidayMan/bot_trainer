<b>Законы машинного программирования</b>

1. Любая действующая программа устарела.
2. Любая программа обходится дороже и требует больших затрат времени, чем предполагалось.
3. Если программа полностью отлажена ее нужно будет скорректировать.
4. Любая программа стремится занять всю доступную память.
5. Ценность программы прямо пропорциональна весу ее «выдачи».
6. Сложность программы растет до тех пор, пока не превысит способности программиста.

<b>Принцип IBM</b>
Машина должна работать, а человек — думать.

<b>Аксиома Кана</b>
Если ничто другое не помогает, прочтите, наконец, инструкцию!

<b>Закон своенравия природы</b>
Нельзя заранее правильно определить, какую сторону бутерброда мазать маслом.

<b>Закон избирательного тяготения</b>
Предмет упадет таким образом, чтобы нанести больший ущерб.

<b>Следствие Дженнинга:</b>
Вероятность того, что бутерброд упадет маслом вниз, прямо пропорциональна стоимости ковра.

<b>Следствие Клипштейна:</b>
Уронят самую хрупкую деталь.

<b>Закон цеха Энтони</b>
Любой инструмент, если его уронят, закатывается в самый недоступный угол цеха.

<b>Следствие:</b>
Закатываясь в угол, он сначала ударит вас по пальцам ноги.

<b>Принцип запасных частей</b>
Во время поиска небольших запасных частей, упавших с рабочего места, вероятность их обнаружения прямо пропорциональна размеру детали и обратно пропорциональна ее значению для завершения работ.

<b>Закон силы Энтони</b>
Не тратьте силы, возьмите молоток побольше!

<b>Закон Поля</b>
С пола упасть нельзя.

<b>Закон Уатсона</b>
Надежность оборудования обратно пропорциональна числу и положению лиц, за ним наблюдающих.

<b>Закон Вышковского</b>
Все можно наладить, если вертеть в руках достаточно долго.

<b>Закон Лоуэри</b>
Заело деталь — надави на нее. Если она сломалась — ничего: все равно надо было ее заменять.

<b>Закон Шмидта</b>
Если достаточно долго портить машину — она сломается.

<b>Постулат Хорнера</b>
Опыт растет прямо пропорционально выведенному из строя оборудованию.

<b>Закон противодействия Фудда</b>
Толкните что-нибудь тяжелое, и оно опрокинется.

<b>Дополнение Э. Дейкстра</b>
Если отладка — процесс удаления ошибок, то программирование должно быть процессом их внесения.

<b>Закон Грида</b>
Машинная программа выполняет то, что вы ей приказали делать, а не то, что бы вы хотели, чтобы она делала.

<b>Компьютерная аксиома Лео Бейзера</b>
Закладывая что-то в ЭВМ, помните, куда вы это положили.

<b>Руководство по системному программированию Штейнбаха</b>
Никогда не выявляйте в программе ошибки, если не знаете, что с ними дальше делать.

<b>Дополнение Марка Дэвисона</b>
Вы уже дошли до состояния, когда у вас нет времени, чтобы разрешить те проблемы, которые отнимают у вас все время?

<b>Постулаты Трутмэна по программирования</b>

1. Самая грубая ошибка будет выявлена, лишь когда программа пробудет в производстве по крайней мере полгода.
2. Контрольные перфокарты, которые решительно не могут стоять в неправильном порядке, будут перепутаны.
3. Если назначен специальный человек для контроля за чистотой исходной информации, то найдется изобретательный идиот, который придумает способ, чтобы неправильная информация прошла через этот контроль.
4. Непечатный жаргон — это тот язык, которым решительно все программисты владеют в совершенстве.

<b>Закон ненадежности</b>
Ошибаться человеку свойственно, но окончательно все запутать может только компьютер.

<b>Законы надежности Джилба</b>

1. Компьютеры ненадежны, но люди еще ненадежнее.
2. Любая система, зависящая от человеческой надежности, ненадежна.
3. Число ошибок, которые нельзя обнаружить, бесконечно, в противовес числу ошибок, которые можно обнаружить — оно конечно по определению.
4. В поиски повышения надежности будут вкладываться средства до тех пор, пока они не превысят величину убытков от неизбежных ошибок или пока кто-нибудь не потребует, чтобы была сделана хоть какая-то полезная работа.

<b>Закон мира ЭВМ по Голубу</b>

1. Неточно спланированная программа требует в три раза больше времени, чем предполагалось; тщательно спланированная — только в два раза.
2. Работающая над программой группа питает отвращение к еженедельной отчетности о достигнутых результатах, поскольку отчетность слишком явно свидетельствует об отсутствии результатов.

<b>Закон компьютера применительно к Алу</b>
Машина считает, человек принимает (решения).

<b>Закон Чарльза Портмана (ICL)</b>
Когда кажется, что все уже работает, все объединено в систему — вам еще осталось работы на четыре месяца.